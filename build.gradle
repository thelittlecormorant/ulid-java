plugins {
    id 'java-library'
    id "me.champeau.jmh" version "0.7.1"
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
    id 'maven-publish'
    id "signing"
}

group 'io.github.jaspeen'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.hibernate:hibernate-core:6.4.4.Final'
    implementation 'org.apache.commons:commons-text:1.9'
    

}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = "11"
    targetCompatibility = "11"

    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = project.name
                description = 'ULID java implementation'
                url = 'https://github.com/jaspeen/ulid-java'
                inceptionYear = '2023'
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://spdx.org/licenses/Apache-2.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'jaspeen'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/jaspeen/ulid-java.git'
                    developerConnection = 'scm:git:ssh://github.com/jaspeen/ulid-java.git'
                    url = 'http://github.com/jaspeen/ulid-java'
                }
            }
        }
    }
    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

signing {
    def gpgKey = findProperty("gpgKey")
    def gpgPassphrase = findProperty("gpgPassphrase")
    useInMemoryPgpKeys(gpgKey, gpgPassphrase)
    sign publishing.publications.maven
}
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = findProperty("nexusUsername")
            password = findProperty("nexusPassword")
        }
    }
}
task checkVersion {
    doLast {
        def ver = findProperty("version")
        if (ver == 'unspecified') {
            throw new GradleException("invalid version, specify -Pversion=<x.y.z>")
        }
    }
}
publish.dependsOn checkVersion


